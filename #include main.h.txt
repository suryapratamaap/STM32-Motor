#include "main.h"
#include "stm32f1xx_hal.h"

// Definisi pin motor
#define PWM_1_PIN GPIO_PIN_6
#define PWM_1_PORT GPIOB
#define RPWM_1_PIN GPIO_PIN_7
#define RPWM_1_PORT GPIOB
#define LPWM_1_PIN GPIO_PIN_8
#define LPWM_1_PORT GPIOB

#define PWM_2_PIN GPIO_PIN_9
#define PWM_2_PORT GPIOB
#define RPWM_2_PIN GPIO_PIN_10
#define RPWM_2_PORT GPIOB
#define LPWM_2_PIN GPIO_PIN_11
#define LPWM_2_PORT GPIOB

#define PWM_3_PIN GPIO_PIN_12
#define PWM_3_PORT GPIOB
#define RPWM_3_PIN GPIO_PIN_13
#define RPWM_3_PORT GPIOB
#define LPWM_3_PIN GPIO_PIN_14
#define LPWM_3_PORT GPIOB

// Variabel global
TIM_HandleTypeDef htim4;
uint32_t waktu_display_sebelumnya = 0;
bool t = 0;
uint32_t waktu_sebelumnya = 0;
bool t12 = 0;
int SPEED = 150; // Kecepatan motor (0-255)

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);

int main(void) {
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_TIM4_Init();

  // Start PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // PWM_1
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // PWM_2
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // PWM_3

  // Matikan semua motor saat memulai
  HAL_GPIO_WritePin(RPWM_1_PORT, RPWM_1_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LPWM_1_PORT, LPWM_1_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(RPWM_2_PORT, RPWM_2_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LPWM_2_PORT, LPWM_2_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(RPWM_3_PORT, RPWM_3_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LPWM_3_PORT, LPWM_3_PIN, GPIO_PIN_RESET);

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // PWM_1 = 0
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0); // PWM_2 = 0
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // PWM_3 = 0

  while (1) {
    uint32_t waktu_display = HAL_GetTick();
    if (waktu_display - waktu_display_sebelumnya >= 2000) {
      waktu_display_sebelumnya = waktu_display;
      t = !t;
    }

    // Kontrol Motor 3
    if (!t) {
      HAL_GPIO_WritePin(RPWM_3_PORT, RPWM_3_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(LPWM_3_PORT, LPWM_3_PIN, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, SPEED);
    } else {
      HAL_GPIO_WritePin(RPWM_3_PORT, RPWM_3_PIN, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(LPWM_3_PORT, LPWM_3_PIN, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, SPEED);
    }

    uint32_t waktu = HAL_GetTick();
    if (waktu - waktu_sebelumnya >= 5000) {
      waktu_sebelumnya = waktu;
      t12 = !t12;
    }

    // Kontrol Motor 1 dan 2
    if (!t12) {
      // Maju
      HAL_GPIO_WritePin(RPWM_1_PORT, RPWM_1_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(LPWM_1_PORT, LPWM_1_PIN, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, SPEED);

      HAL_GPIO_WritePin(RPWM_2_PORT, RPWM_2_PIN, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(LPWM_2_PORT, LPWM_2_PIN, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, SPEED);
    } else {
      // Mundur
      HAL_GPIO_WritePin(RPWM_1_PORT, RPWM_1_PIN, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(LPWM_1_PORT, LPWM_1_PIN, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, SPEED);

      HAL_GPIO_WritePin(RPWM_2_PORT, RPWM_2_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(LPWM_2_PORT, LPWM_2_PIN, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, SPEED);
    }
  }
}

static void MX_TIM4_Init(void) {
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 255; // 8-bit PWM
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOB_CLK_ENABLE();

  // Konfigurasi pin motor
  GPIO_InitStruct.Pin = RPWM_1_PIN | LPWM_1_PIN | RPWM_2_PIN | LPWM_2_PIN | RPWM_3_PIN | LPWM_3_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void SystemClock_Config(void) {
  // Konfigurasi clock sesuai kebutuhan
}

void Error_Handler(void) {
  // Handle error
}